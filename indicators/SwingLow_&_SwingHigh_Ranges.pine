// ─────────────────────────────────────────────────────────────
// ACCESS ALGO – Project 19 -FxPro Walkforward
// © Hc_Sunt_Lucrum | access-algo.com
// This script is subject to the terms of the Mozilla Public License 2.0
// https://mozilla.org/MPL/2.0/
//
// Description: Project 19.5 experiments with fixed closed paramters. Such as next green candle close.
// 
//
// Usage: Private
// Designed for TradingView. Compatible with Pine Script v6.
// Free to use under invite-only rules or for educational purposes.
//
// Version:         v16
// Last Updated:    2025-07-17
// Author:          Hc_Sunt_Lucrum
// Contact:         access-algo.com | TradingView: @Hc_Sunt_Lucrum
// ─────────────────────────────────────────────────────────────


//strategy("Client Build 117 - DAX Reversals ", overlay=true, default_qty_type=strategy.percent_of_equity, initial_capital=100000, currency=currency.USD,calc_on_order_fills = true)

// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Hc_Sunt_Lucrum

//@version=6
indicator('Swing High Low Detector by RV5', overlay = true, max_lines_count = 500)

// Import Zen if not already present in this file:
import ZenAndTheArtOfTrading/ZenLibrary/10 as zen

// === INPUTS ===
swingStrengthHigh = input.int(5, minval = 1, title = 'Swing high Lookback', tooltip = "How many candles to look back and determine and local Swing High upon which to trigger a doubble bottom search", display = display.all - display.status_line)
swingStrengthLow = input.int(5, minval = 1, title = 'Swing low Lookback', tooltip = "How many candles to look back and determine and local Swing Low upon which to trigger a doubble bottom search", display = display.all - display.status_line)
swingSourceHigh = input.source(high, title = 'Swing high source', display = display.all - display.status_line)
swingSourceLow = input.source(low, title = 'Swing low source', display = display.all - display.status_line)
removeSweptLevels = input.bool(false, title = 'Delete swept double bottoms', tooltip = 'When enabled, past swing lines will be deleted if price closes through them.')
sweepConditionOpt = input.string("Close Break", title = "Sweep condition type", options = ["Wick Break", "Close Break"], tooltip = "Choose whether swing levels are deleted when price wicks through them (high/low) or closes through them (close).")
// --- Post-break extension ---
extendAfterBreakBars = input.int(2, "Extend zones N bars after invalidation", minval=0, tooltip="Keeps the swing line and its ATR band visible for N bars after the level is broken.")


doubeBottomATRLength = input.int(14, title = "Double Bottom ATR length")
doubleBottomATRBand = input.float(1, title = "Double Bottom Zone ATR Multiplier", tooltip = "Creates a band around a local Swing High or Swing Low, upon which to detect the presence of a reversal candle and confirm and double bottom entry. Number multiplies the Double Bottom ATR")

// === STYLE INPUTS ===
// --- Current SH
shExtColor = input.color(color.red, 'Color', group = 'Current Swing High', display = display.all - display.status_line)
shExtStyleStr = input.string('Solid', 'Style', options = ['Solid', 'Dotted', 'Dashed'], group = 'Current Swing High', display = display.all - display.status_line)
shExtWidth = input.int(3, 'Thickness', minval = 1, maxval = 5, group = 'Current Swing High', display = display.all - display.status_line)
// --- Past SH
shColor = input.color(color.red, 'Color', group = 'Past Swing High', display = display.all - display.status_line)
shStyleStr = input.string('Dotted', 'Style', options = ['Solid', 'Dotted', 'Dashed'], group = 'Past Swing High', display = display.all - display.status_line)
shWidth = input.int(2, 'Thickness', minval = 1, maxval = 5, group = 'Past Swing High', display = display.all - display.status_line)
// --- Current SL
slExtColor = input.color(color.aqua, 'Color', group = 'Current Swing Low', display = display.all - display.status_line)
slExtStyleStr = input.string('Solid', 'Style', options = ['Solid', 'Dotted', 'Dashed'], group = 'Current Swing Low', display = display.all - display.status_line)
slExtWidth = input.int(3, 'Thickness', minval = 1, maxval = 5, group = 'Current Swing Low', display = display.all - display.status_line)
// --- Past SL
slColor = input.color(color.aqua, 'Color', group = 'Past Swing Low', display = display.all - display.status_line)
slStyleStr = input.string('Dotted', 'Style', options = ['Solid', 'Dotted', 'Dashed'], group = 'Past Swing Low', display = display.all - display.status_line)
slWidth = input.int(2, 'Thickness', minval = 1, maxval = 5, group = 'Past Swing Low', display = display.all - display.status_line)

// === STYLE MAPPINGS ===
shExtStyle = shExtStyleStr == 'Dotted' ? line.style_dotted : shExtStyleStr == 'Dashed' ? line.style_dashed : line.style_solid
shStyle = shStyleStr == 'Dotted' ? line.style_dotted : shStyleStr == 'Dashed' ? line.style_dashed : line.style_solid
slExtStyle = slExtStyleStr == 'Dotted' ? line.style_dotted : slExtStyleStr == 'Dashed' ? line.style_dashed : line.style_solid
slStyle = slStyleStr == 'Dotted' ? line.style_dotted : slStyleStr == 'Dashed' ? line.style_dashed : line.style_solid



dbRangeAtr = (ta.atr(doubeBottomATRLength) * doubleBottomATRBand) / 2


// === VARS ===
var line currentHighLine = na
var line currentLowLine = na
var float currentHigh = na
var float currentLow = na
var int currentHighStart = na
var int currentLowStart = na
var array<line> pastHighLines = array.new_line()
var array<float> pastHighPrices = array.new_float()
var array<line> pastLowLines = array.new_line()
var array<float> pastLowPrices = array.new_float()

// Current bands
var line currentHighBandTopLine = na
var line currentHighBandBotLine = na
var line currentLowBandTopLine  = na
var line currentLowBandBotLine  = na
var float currentHighBandHalf = na
var float currentLowBandHalf  = na

// Past band arrays (parallel to your pastHigh/Low arrays)
var array<line> pastHighBandTopLines = array.new_line()
var array<line> pastHighBandBotLines = array.new_line()
var array<line> pastLowBandTopLines  = array.new_line()
var array<line> pastLowBandBotLines  = array.new_line()

// Post-break extension handles (HIGH side)
var line extHighBaseLine = na
var line extHighBandTopLine = na
var line extHighBandBotLine = na
var int extHighBarsLeft = 0
var float extHighPrice = na
var float extHighBandHalf = na


// Post-break extension handles (LOW side)
var line extLowBaseLine = na
var line extLowBandTopLine = na
var line extLowBandBotLine = na
var int extLowBarsLeft = 0
var float extLowPrice = na
var float extLowBandHalf = na


useCloseForSweep = sweepConditionOpt == "Close Break"


// === SWING LOGIC ===
isSwingHigh = true
for i = 1 to swingStrengthHigh by 1
    isSwingHigh := isSwingHigh and swingSourceHigh[swingStrengthHigh] > swingSourceHigh[swingStrengthHigh + i]
    isSwingHigh := isSwingHigh and swingSourceHigh[swingStrengthHigh] > swingSourceHigh[swingStrengthHigh - i]
    isSwingHigh
swingHigh = isSwingHigh ? swingSourceHigh[swingStrengthHigh] : na

isSwingLow = true
for i = 1 to swingStrengthLow by 1
    isSwingLow := isSwingLow and swingSourceLow[swingStrengthLow] < swingSourceLow[swingStrengthLow + i]
    isSwingLow := isSwingLow and swingSourceLow[swingStrengthLow] < swingSourceLow[swingStrengthLow - i]
    isSwingLow
swingLow = isSwingLow ? swingSourceLow[swingStrengthLow] : na

// === BREAK CONDITIONS ===
highBroken = not na(currentHigh) and high > currentHigh
lowBroken = not na(currentLow) and low < currentLow

// === HANDLE SWING HIGH ===
if not na(swingHigh)
    if not na(currentHighLine)
        line.set_extend(currentHighLine, extend.none)
        line.set_style(currentHighLine, shStyle)
        array.push(pastHighLines, line.new(currentHighStart, currentHigh, bar_index, currentHigh, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
        array.push(pastHighPrices, currentHigh)
        line.delete(currentHighLine)

        // Archive CURRENT HIGH bands to PAST (if they exist)
        if not na(currentHighBandTopLine) and not na(currentHighBandBotLine)
            array.push(pastHighBandTopLines, line.new(currentHighStart, currentHigh + currentHighBandHalf, bar_index, currentHigh + currentHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
            array.push(pastHighBandBotLines, line.new(currentHighStart, currentHigh - currentHighBandHalf, bar_index, currentHigh - currentHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
            line.delete(currentHighBandTopLine)
            line.delete(currentHighBandBotLine)
            currentHighBandTopLine := na
            currentHighBandBotLine := na
            currentHighBandHalf    := na
   
    currentHigh := swingHigh
    currentHighStart := bar_index - swingStrengthHigh
    currentHighLine := line.new(currentHighStart, swingHigh, bar_index, swingHigh, color = shExtColor, width = shExtWidth, style = shExtStyle, extend = extend.none)
    currentHighBandHalf := dbRangeAtr
    currentHighBandTopLine := line.new(currentHighStart, currentHigh + currentHighBandHalf, bar_index, currentHigh + currentHighBandHalf, color = shExtColor, width = shExtWidth, style = shExtStyle, extend = extend.none)
    currentHighBandBotLine := line.new(currentHighStart, currentHigh - currentHighBandHalf, bar_index, currentHigh - currentHighBandHalf, color = shExtColor, width = shExtWidth, style = shExtStyle, extend = extend.none)
    currentHighLine





// === HANDLE SWING LOW ===
if not na(swingLow)
    if not na(currentLowLine)
        line.set_extend(currentLowLine, extend.none)
        line.set_style(currentLowLine, slStyle)
        array.push(pastLowLines, line.new(currentLowStart, currentLow, bar_index, currentLow, color = slColor, width = slWidth, style = slStyle, extend = extend.none))
        array.push(pastLowPrices, currentLow)
        line.delete(currentLowLine)

        // Archive CURRENT LOW bands to PAST (if they exist)
        if not na(currentLowBandTopLine) and not na(currentLowBandBotLine)
            array.push(pastLowBandTopLines, line.new(currentLowStart, currentLow + currentLowBandHalf, bar_index, currentLow + currentLowBandHalf,
                 color = slColor, width = slWidth, style = slStyle, extend = extend.none))
            array.push(pastLowBandBotLines, line.new(currentLowStart, currentLow - currentLowBandHalf, bar_index, currentLow - currentLowBandHalf,
                 color = slColor, width = slWidth, style = slStyle, extend = extend.none))
            line.delete(currentLowBandTopLine)
            line.delete(currentLowBandBotLine)
            currentLowBandTopLine := na
            currentLowBandBotLine := na
            currentLowBandHalf    := na

    currentLow := swingLow
    currentLowStart := bar_index - swingStrengthLow
    currentLowLine := line.new(currentLowStart, swingLow, bar_index, swingLow, color = slExtColor, width = slExtWidth, style = slExtStyle, extend = extend.none)
    currentLowBandHalf    := dbRangeAtr
    currentLowBandTopLine := line.new(currentLowStart, currentLow + currentLowBandHalf, bar_index, currentLow + currentLowBandHalf, color = slExtColor, width = slExtWidth, style = slExtStyle, extend = extend.none)
    currentLowBandBotLine := line.new(currentLowStart, currentLow - currentLowBandHalf, bar_index, currentLow - currentLowBandHalf, color = slExtColor, width = slExtWidth, style = slExtStyle, extend = extend.none)
    currentLowLine

// === EXTEND CURRENT LINES TO CURRENT BAR ===
if not na(currentHighLine)
    line.set_x2(currentHighLine, bar_index)
    line.set_y2(currentHighLine, currentHigh)

if not na(currentLowLine)
    line.set_x2(currentLowLine, bar_index)
    line.set_y2(currentLowLine, currentLow)

// Extend HIGH bands
if not na(currentHighBandTopLine)
    line.set_x2(currentHighBandTopLine, bar_index)
    line.set_y2(currentHighBandTopLine, currentHigh + currentHighBandHalf)
if not na(currentHighBandBotLine)
    line.set_x2(currentHighBandBotLine, bar_index)
    line.set_y2(currentHighBandBotLine, currentHigh - currentHighBandHalf)

// Extend LOW bands
if not na(currentLowBandTopLine)
    line.set_x2(currentLowBandTopLine, bar_index)
    line.set_y2(currentLowBandTopLine, currentLow + currentLowBandHalf)
if not na(currentLowBandBotLine)
    line.set_x2(currentLowBandBotLine, bar_index)
    line.set_y2(currentLowBandBotLine, currentLow - currentLowBandHalf)

// Post-break extension updater (HIGH)
if extHighBarsLeft > 0
    // extend horizontally to the current bar
    line.set_x2(extHighBaseLine, bar_index)
    line.set_x2(extHighBandTopLine, bar_index)
    line.set_x2(extHighBandBotLine, bar_index)
    // keep y fixed
    line.set_y2(extHighBaseLine,    extHighPrice)
    line.set_y2(extHighBandTopLine, extHighPrice + extHighBandHalf)
    line.set_y2(extHighBandBotLine, extHighPrice - extHighBandHalf)

    if barstate.isconfirmed
        extHighBarsLeft -= 1
        if extHighBarsLeft <= 0
            line.delete(extHighBaseLine)
            line.delete(extHighBandTopLine)
            line.delete(extHighBandBotLine)
            extHighBaseLine    := na
            extHighBandTopLine := na
            extHighBandBotLine := na
            extHighPrice       := na
            extHighBandHalf    := na

// Post-break extension updater (LOW)
if extLowBarsLeft > 0
    line.set_x2(extLowBaseLine, bar_index)
    line.set_x2(extLowBandTopLine, bar_index)
    line.set_x2(extLowBandBotLine, bar_index)
    line.set_y2(extLowBaseLine,    extLowPrice)
    line.set_y2(extLowBandTopLine, extLowPrice + extLowBandHalf)
    line.set_y2(extLowBandBotLine, extLowPrice - extLowBandHalf)

    if barstate.isconfirmed
        extLowBarsLeft -= 1
        if extLowBarsLeft <= 0
            line.delete(extLowBaseLine)
            line.delete(extLowBandTopLine)
            line.delete(extLowBandBotLine)
            extLowBaseLine    := na
            extLowBandTopLine := na
            extLowBandBotLine := na
            extLowPrice       := na
            extLowBandHalf    := na

// === HANDLE BREAKS ===
if highBroken
    // archive the current high base line to "past"
    line.set_extend(currentHighLine, extend.none)
    line.set_style(currentHighLine, shStyle)
    array.push(pastHighLines, line.new(currentHighStart, currentHigh, bar_index, currentHigh, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
    array.push(pastHighPrices, currentHigh)

    // archive the CURRENT HIGH bands to "past" BEFORE clearing vars
    if not na(currentHighBandTopLine) and not na(currentHighBandBotLine)
        array.push(pastHighBandTopLines, line.new(currentHighStart, currentHigh + currentHighBandHalf, bar_index, currentHigh + currentHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
        array.push(pastHighBandBotLines, line.new(currentHighStart, currentHigh - currentHighBandHalf, bar_index, currentHigh - currentHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none))
        
    // spawn post-break extension clones for N bars
    if extendAfterBreakBars > 0
        extHighPrice    := currentHigh
        extHighBandHalf := currentHighBandHalf
        extHighBaseLine    := line.new(bar_index, extHighPrice, bar_index, extHighPrice, color = shColor, width = shWidth, style = shStyle, extend = extend.none)
        extHighBandTopLine := line.new(bar_index, extHighPrice + extHighBandHalf, bar_index, extHighPrice + extHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none)
        extHighBandBotLine := line.new(bar_index, extHighPrice - extHighBandHalf, bar_index, extHighPrice - extHighBandHalf, color = shColor, width = shWidth, style = shStyle, extend = extend.none)
        extHighBarsLeft := extendAfterBreakBars

    // now clear the current high base line + vars
    line.delete(currentHighBandTopLine)
    line.delete(currentHighBandBotLine)
    currentHighBandTopLine := na
    currentHighBandBotLine := na
    currentHighBandHalf    := na
    line.delete(currentHighLine)
    currentHighLine  := na
    currentHigh      := na
    currentHighStart := na

if lowBroken
    // archive the current low base line to "past"
    line.set_extend(currentLowLine, extend.none)
    line.set_style(currentLowLine, slStyle)
    array.push(pastLowLines, line.new(currentLowStart, currentLow, bar_index, currentLow, color = slColor, width = slWidth, style = slStyle, extend = extend.none))
    array.push(pastLowPrices, currentLow)

    // archive CURRENT LOW bands to "past" BEFORE clearing vars
    if not na(currentLowBandTopLine) and not na(currentLowBandBotLine)
        array.push(pastLowBandTopLines, line.new(currentLowStart, currentLow + currentLowBandHalf, bar_index, currentLow + currentLowBandHalf, color = slColor, width = slWidth, style = slStyle, extend = extend.none))
        array.push(pastLowBandBotLines, line.new(currentLowStart, currentLow - currentLowBandHalf, bar_index, currentLow - currentLowBandHalf, color = slColor, width = slWidth, style = slStyle, extend = extend.none))
   
    // spawn post-break extension clones for N bars
    if extendAfterBreakBars > 0
        extLowPrice    := currentLow
        extLowBandHalf := currentLowBandHalf
        extLowBaseLine    := line.new(bar_index, extLowPrice, bar_index, extLowPrice, color = slColor, width = slWidth, style = slStyle, extend = extend.none)
        extLowBandTopLine := line.new(bar_index, extLowPrice + extLowBandHalf, bar_index, extLowPrice + extLowBandHalf, color = slColor, width = slWidth, style = slStyle, extend = extend.none)
        extLowBandBotLine := line.new(bar_index, extLowPrice - extLowBandHalf, bar_index, extLowPrice - extLowBandHalf, color = slColor, width = slWidth, style = slStyle, extend = extend.none)
        extLowBarsLeft := extendAfterBreakBars

    // now clear the current low base line + vars
    line.delete(currentLowBandTopLine)
    line.delete(currentLowBandBotLine)
    currentLowBandTopLine := na
    currentLowBandBotLine := na
    currentLowBandHalf    := na
    line.delete(currentLowLine)
    currentLowLine  := na
    currentLow      := na
    currentLowStart := na

// === REMOVE SWEPT PAST LEVELS ===
if removeSweptLevels
    // Sweep Highs
    i = array.size(pastHighPrices) - 1
    while i >= 0
        lvl = array.get(pastHighPrices, i)
        if (useCloseForSweep ? close > lvl : high > lvl)
            line.delete(array.get(pastHighLines, i))
            array.remove(pastHighLines, i)
            array.remove(pastHighPrices, i)

            // delete matching band lines at the same index (if they exist)
            if array.size(pastHighBandTopLines) > i
                line.delete(array.get(pastHighBandTopLines, i))
                array.remove(pastHighBandTopLines, i)
            if array.size(pastHighBandBotLines) > i
                line.delete(array.get(pastHighBandBotLines, i))
                array.remove(pastHighBandBotLines, i)
        i := i - 1
        i

    // Sweep Lows
    j = array.size(pastLowPrices) - 1
    while j >= 0
        lvl = array.get(pastLowPrices, j)
        if (useCloseForSweep ? close < lvl : low < lvl)
            line.delete(array.get(pastLowLines, j))
            array.remove(pastLowLines, j)
            array.remove(pastLowPrices, j)
            // delete matching band lines at the same index (if they exist)
            if array.size(pastLowBandTopLines) > j
                line.delete(array.get(pastLowBandTopLines, j))
                array.remove(pastLowBandTopLines, j)
            if array.size(pastLowBandBotLines) > j
                line.delete(array.get(pastLowBandBotLines, j))
                array.remove(pastLowBandBotLines, j)
        j := j - 1
        j


// === REVERSAL CANDLE ENTRY LOGIC (zone-based) ============================


// Inputs (optional fine-tune)
var const string GRP_REV = "Zone Reversal Triggers"
useCloseForZone = input.bool(false, "Zone test uses CLOSE (else LOW/HIGH)", group=GRP_REV, tooltip="If true, close must be inside the band; else we use low for lows and high for highs.")
hammerFib   = input.float(0.382, "Hammer fib (pin bar)", minval=0, maxval=1, group=GRP_REV)
starFib     = input.float(0.382, "Shooting star fib (pin)", minval=0, maxval=1, group=GRP_REV)
engulfWick  = input.bool(false,   "Engulf must include wick?", group=GRP_REV)
allowancePt = input.float(0.0,    "Engulf open allowance (pts)", group=GRP_REV, tooltip="Tolerance for tiny open gaps")
rejWickMax  = input.float(0.0,    "Max rejection wick/body (0=off)", group=GRP_REV)

// Guard: we only have valid zones when current swing + half-width exist
haveLowZoneCur   = not na(currentLow)  and not na(currentLowBandHalf)
haveHighZoneCur  = not na(currentHigh) and not na(currentHighBandHalf)

// 🟢 NEW — Extension zone guards
haveLowZoneEx    = extLowBarsLeft  > 0 and not na(extLowPrice)  and not na(extLowBandHalf)
haveHighZoneEx   = extHighBarsLeft > 0 and not na(extHighPrice) and not na(extHighBandHalf)

// In-zone checks (choose close or extrema)
priceForLowZone  = useCloseForZone ? close : low
priceForHighZone = useCloseForZone ? close : high

inLowZoneCur  = haveLowZoneCur  and (priceForLowZone  >= (currentLow  - currentLowBandHalf))  and (priceForLowZone  <= (currentLow  + currentLowBandHalf))
inHighZoneCur = haveHighZoneCur and (priceForHighZone >= (currentHigh - currentHighBandHalf)) and (priceForHighZone <= (currentHigh + currentHighBandHalf))

inLowZoneEx   = haveLowZoneEx   and (priceForLowZone  >= (extLowPrice  - extLowBandHalf))   and (priceForLowZone  <= (extLowPrice  + extLowBandHalf))
inHighZoneEx  = haveHighZoneEx  and (priceForHighZone >= (extHighPrice - extHighBandHalf))  and (priceForHighZone <= (extHighPrice + extHighBandHalf))

inLowZone  = inLowZoneCur  or inLowZoneEx
inHighZone = inHighZoneCur or inHighZoneEx

// Candlestick patterns (evaluated on this bar)
bullPin = zen.isHammer(hammerFib, false)
bearPin = zen.isStar(starFib, false)
bullEng = zen.isBullishEC(allowancePt, rejWickMax, engulfWick)
bearEng = zen.isBearishEC(allowancePt, rejWickMax, engulfWick)

// Triggers: zone + correct reversal direction
longZoneTrigger  = inLowZone  and (bullPin or bullEng)   // double-bottom style
shortZoneTrigger = inHighZone and (bearPin or bearEng)   // double-top style

// Plots
plotshape(longZoneTrigger,  title="Swing-Low Zone Bull Reversal",  style=shape.triangleup,   location=location.belowbar, color=color.new(color.lime, 0), size=size.tiny, text="DB")
plotshape(shortZoneTrigger, title="Swing-High Zone Bear Reversal", style=shape.triangledown, location=location.abovebar, color=color.new(color.red,  0), size=size.tiny, text="DT")



// === ALERT CONDITIONS ===
alertcondition(highBroken, title = 'Swing High Broken', message = '🔔 Swing High Broken at {{close}}')
alertcondition(lowBroken, title = 'Swing Low Broken', message = '🔔 Swing Low Broken at {{close}}')
//updated chart.

plot(close)
